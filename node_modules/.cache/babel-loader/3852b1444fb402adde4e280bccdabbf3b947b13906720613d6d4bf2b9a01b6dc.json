{"ast":null,"code":"var _jsxFileName = \"/Users/chenyudong/Desktop/fhevm-nft-dapp/fhevm-nft-dapp-zama/src/App.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { motion } from \"framer-motion\";\nimport Confetti from \"react-confetti\";\nimport { useWindowSize } from \"react-use\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x4c020a37c1eae6138c5bbe028fe17992b3902f9f\";\nconst ABI = [{\n  inputs: [{\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"string\",\n    name: \"cid\",\n    type: \"string\"\n  }],\n  name: \"mintWithCID\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\nconst NFT_NAME = \"ZamaPuff\";\nconst NFT_DESC = \"这是 ZAMA 吉祥物的 NFT，象征智慧与好奇心，独一无二的数字收藏品。\";\nconst catImage = \"https://i.imgur.com/YUeySct.png\";\nconst NFT_STORAGE_API_KEY = \"7717dc0b.0f7541d71e7b4181abb05ff9ca12da2c\"; // 替换成你的 NFT.Storage Key\n\nlet fheInstance = null;\nfunction App() {\n  _s();\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [showFireworks, setShowFireworks] = useState(false);\n  const [txHash, setTxHash] = useState(null);\n  const [fheReady, setFheReady] = useState(false);\n  const [minting, setMinting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const {\n    width,\n    height\n  } = useWindowSize();\n\n  // 初始化 Zama SDK\n  useEffect(() => {\n    const loadFHE = async () => {\n      try {\n        const {\n          initSDK,\n          createInstance\n        } = await import(\"https://cdn.zama.ai/relayer-sdk-js/0.2.0/relayer-sdk-js.js\");\n        await initSDK();\n        fheInstance = await createInstance({\n          aclContractAddress: '0x687820221192C5B662b25367F70076A37bc79b6c',\n          kmsContractAddress: '0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC',\n          inputVerifierContractAddress: '0xbc91f3daD1A5F19F8390c400196e58073B6a0BC4',\n          verifyingContractAddressDecryption: '0xb6E160B1ff80D67Bfe90A85eE06Ce0A2613607D1',\n          verifyingContractAddressInputVerification: '0x7048C39f048125eDa9d678AEbaDfB22F7900a29F',\n          chainId: 11155111,\n          gatewayChainId: 55815,\n          network: window.ethereum,\n          relayerUrl: 'https://relayer.testnet.zama.cloud'\n        });\n        setFheReady(true);\n        console.log(\"Zama SDK 初始化完成\");\n      } catch (err) {\n        console.error(\"加载 Zama SDK 失败:\", err);\n      }\n    };\n    loadFHE();\n  }, []);\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      alert(\"请安装 MetaMask!\");\n      return;\n    }\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      setWalletAddress(accounts[0]);\n    } catch (err) {\n      alert(\"连接钱包失败: \" + err.message);\n    }\n  };\n  const getContract = signer => new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);\n  const handleMint = async () => {\n    if (!walletAddress || !fheReady) return;\n    setMinting(true);\n    setProgress(0);\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = getContract(signer);\n\n      // 1️⃣ FHE 分块加密 metadata\n      const encodedText = ethers.toUtf8Bytes(`${NFT_NAME} - ${NFT_DESC}`);\n      const chunkSize = 32;\n      let ciphertextHandles = [];\n      for (let i = 0; i < encodedText.length; i += chunkSize) {\n        const chunk = encodedText.slice(i, i + chunkSize);\n        const buffer = fheInstance.createEncryptedInput(CONTRACT_ADDRESS, await signer.getAddress());\n        for (let j = 0; j < chunk.length; j++) buffer.add64(BigInt(chunk[j]));\n        const ciphertext = await buffer.encrypt();\n        ciphertextHandles.push(...ciphertext.handles);\n        setProgress(Math.floor((i + chunk.length) / encodedText.length * 100));\n        await new Promise(res => setTimeout(res, 50));\n      }\n\n      // 2️⃣ 上传到 NFT.Storage（CDN 方式）\n      const client = new window.NFTStorage({\n        token: NFT_STORAGE_API_KEY\n      });\n      const blob = new Blob([JSON.stringify(ciphertextHandles)]);\n      const cid = await client.storeBlob(blob);\n      console.log(\"NFT CID:\", cid);\n\n      // 3️⃣ 链上 mint\n      const tx = await contract.mintWithCID(await signer.getAddress(), cid, {\n        gasLimit: 800000\n      });\n      setTxHash(tx.hash);\n      setShowFireworks(true);\n    } catch (err) {\n      console.error(err);\n      alert(\"Mint 失败: \" + err.message);\n    } finally {\n      setMinting(false);\n      setProgress(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"2rem\",\n      position: \"relative\"\n    },\n    children: [showFireworks && /*#__PURE__*/_jsxDEV(Confetti, {\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: walletAddress ? () => setWalletAddress(null) : connectWallet,\n      children: walletAddress ? walletAddress.slice(0, 6) + \"...\" + walletAddress.slice(-4) : \"连接钱包\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: NFT_NAME\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(motion.img, {\n      src: catImage,\n      alt: \"cat\",\n      style: {\n        width: 300,\n        height: 300\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: NFT_DESC\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMint,\n      disabled: !walletAddress || !fheReady || minting,\n      children: minting ? `Minting... ${progress}%` : \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), showFireworks && txHash && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u4EA4\\u6613: \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://sepolia.etherscan.io/tx/${txHash}`,\n        target: \"_blank\",\n        children: txHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SJVOpXhb0N7JeMvxy9Jihnm04PA=\", false, function () {\n  return [useWindowSize];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","motion","Confetti","useWindowSize","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","ABI","inputs","internalType","name","type","outputs","stateMutability","NFT_NAME","NFT_DESC","catImage","NFT_STORAGE_API_KEY","fheInstance","App","_s","walletAddress","setWalletAddress","showFireworks","setShowFireworks","txHash","setTxHash","fheReady","setFheReady","minting","setMinting","progress","setProgress","width","height","loadFHE","initSDK","createInstance","aclContractAddress","kmsContractAddress","inputVerifierContractAddress","verifyingContractAddressDecryption","verifyingContractAddressInputVerification","chainId","gatewayChainId","network","window","ethereum","relayerUrl","console","log","err","error","connectWallet","alert","accounts","request","method","message","getContract","signer","Contract","handleMint","provider","BrowserProvider","getSigner","contract","encodedText","toUtf8Bytes","chunkSize","ciphertextHandles","i","length","chunk","slice","buffer","createEncryptedInput","getAddress","j","add64","BigInt","ciphertext","encrypt","push","handles","Math","floor","Promise","res","setTimeout","client","NFTStorage","token","blob","Blob","JSON","stringify","cid","storeBlob","tx","mintWithCID","gasLimit","hash","style","textAlign","padding","position","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","img","src","alt","disabled","href","target","_c","$RefreshReg$"],"sources":["/Users/chenyudong/Desktop/fhevm-nft-dapp/fhevm-nft-dapp-zama/src/App.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { motion } from \"framer-motion\";\nimport Confetti from \"react-confetti\";\nimport { useWindowSize } from \"react-use\";\nimport \"./index.css\";\n\nconst CONTRACT_ADDRESS = \"0x4c020a37c1eae6138c5bbe028fe17992b3902f9f\";\nconst ABI = [\n  {\n    inputs: [\n      { internalType: \"address\", name: \"to\", type: \"address\" },\n      { internalType: \"string\", name: \"cid\", type: \"string\" }\n    ],\n    name: \"mintWithCID\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }\n];\n\nconst NFT_NAME = \"ZamaPuff\";\nconst NFT_DESC = \"这是 ZAMA 吉祥物的 NFT，象征智慧与好奇心，独一无二的数字收藏品。\";\nconst catImage = \"https://i.imgur.com/YUeySct.png\";\nconst NFT_STORAGE_API_KEY = \"7717dc0b.0f7541d71e7b4181abb05ff9ca12da2c\"; // 替换成你的 NFT.Storage Key\n\nlet fheInstance = null;\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [showFireworks, setShowFireworks] = useState(false);\n  const [txHash, setTxHash] = useState(null);\n  const [fheReady, setFheReady] = useState(false);\n  const [minting, setMinting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const { width, height } = useWindowSize();\n\n  // 初始化 Zama SDK\n  useEffect(() => {\n    const loadFHE = async () => {\n      try {\n        const { initSDK, createInstance } = await import(\n          \"https://cdn.zama.ai/relayer-sdk-js/0.2.0/relayer-sdk-js.js\"\n        );\n        await initSDK();\n        fheInstance = await createInstance({\n          aclContractAddress: '0x687820221192C5B662b25367F70076A37bc79b6c',\n          kmsContractAddress: '0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC',\n          inputVerifierContractAddress: '0xbc91f3daD1A5F19F8390c400196e58073B6a0BC4',\n          verifyingContractAddressDecryption: '0xb6E160B1ff80D67Bfe90A85eE06Ce0A2613607D1',\n          verifyingContractAddressInputVerification: '0x7048C39f048125eDa9d678AEbaDfB22F7900a29F',\n          chainId: 11155111,\n          gatewayChainId: 55815,\n          network: window.ethereum,\n          relayerUrl: 'https://relayer.testnet.zama.cloud',\n        });\n        setFheReady(true);\n        console.log(\"Zama SDK 初始化完成\");\n      } catch (err) {\n        console.error(\"加载 Zama SDK 失败:\", err);\n      }\n    };\n    loadFHE();\n  }, []);\n\n  const connectWallet = async () => {\n    if (!window.ethereum) { alert(\"请安装 MetaMask!\"); return; }\n    try {\n      const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n      setWalletAddress(accounts[0]);\n    } catch(err) {\n      alert(\"连接钱包失败: \" + err.message);\n    }\n  };\n\n  const getContract = (signer) => new ethers.Contract(CONTRACT_ADDRESS, ABI, signer);\n\n  const handleMint = async () => {\n    if (!walletAddress || !fheReady) return;\n\n    setMinting(true);\n    setProgress(0);\n\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const signer = await provider.getSigner();\n      const contract = getContract(signer);\n\n      // 1️⃣ FHE 分块加密 metadata\n      const encodedText = ethers.toUtf8Bytes(`${NFT_NAME} - ${NFT_DESC}`);\n      const chunkSize = 32;\n      let ciphertextHandles = [];\n\n      for (let i = 0; i < encodedText.length; i += chunkSize) {\n        const chunk = encodedText.slice(i, i + chunkSize);\n        const buffer = fheInstance.createEncryptedInput(CONTRACT_ADDRESS, await signer.getAddress());\n        for (let j = 0; j < chunk.length; j++) buffer.add64(BigInt(chunk[j]));\n        const ciphertext = await buffer.encrypt();\n        ciphertextHandles.push(...ciphertext.handles);\n\n        setProgress(Math.floor(((i + chunk.length) / encodedText.length) * 100));\n        await new Promise(res => setTimeout(res, 50));\n      }\n\n      // 2️⃣ 上传到 NFT.Storage（CDN 方式）\n      const client = new window.NFTStorage({ token: NFT_STORAGE_API_KEY });\n      const blob = new Blob([JSON.stringify(ciphertextHandles)]);\n      const cid = await client.storeBlob(blob);\n      console.log(\"NFT CID:\", cid);\n\n      // 3️⃣ 链上 mint\n      const tx = await contract.mintWithCID(await signer.getAddress(), cid, { gasLimit: 800_000 });\n      setTxHash(tx.hash);\n      setShowFireworks(true);\n\n    } catch(err) {\n      console.error(err);\n      alert(\"Mint 失败: \" + err.message);\n    } finally {\n      setMinting(false);\n      setProgress(0);\n    }\n  };\n\n  return (\n    <div style={{ textAlign:\"center\", padding:\"2rem\", position:\"relative\" }}>\n      {showFireworks && <Confetti width={width} height={height} />}\n      <button onClick={walletAddress ? () => setWalletAddress(null) : connectWallet}>\n        {walletAddress ? walletAddress.slice(0,6)+\"...\"+walletAddress.slice(-4) : \"连接钱包\"}\n      </button>\n\n      <h1>{NFT_NAME}</h1>\n      <motion.img src={catImage} alt=\"cat\" style={{ width:300, height:300 }} />\n      <p>{NFT_DESC}</p>\n\n      <button onClick={handleMint} disabled={!walletAddress || !fheReady || minting}>\n        {minting ? `Minting... ${progress}%` : \"Mint NFT\"}\n      </button>\n\n      {showFireworks && txHash && (\n        <p>交易: <a href={`https://sepolia.etherscan.io/tx/${txHash}`} target=\"_blank\">{txHash}</a></p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,MAAM,QAAQ,eAAe;AACtC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,SAASC,aAAa,QAAQ,WAAW;AACzC,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,gBAAgB,GAAG,4CAA4C;AACrE,MAAMC,GAAG,GAAG,CACV;EACEC,MAAM,EAAE,CACN;IAAEC,YAAY,EAAE,SAAS;IAAEC,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE;EAAU,CAAC,EACxD;IAAEF,YAAY,EAAE,QAAQ;IAAEC,IAAI,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAS,CAAC,CACxD;EACDD,IAAI,EAAE,aAAa;EACnBE,OAAO,EAAE,CAAC;IAAEH,YAAY,EAAE,SAAS;IAAEC,IAAI,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAU,CAAC,CAAC;EACjEE,eAAe,EAAE,YAAY;EAC7BF,IAAI,EAAE;AACR,CAAC,CACF;AAED,MAAMG,QAAQ,GAAG,UAAU;AAC3B,MAAMC,QAAQ,GAAG,uCAAuC;AACxD,MAAMC,QAAQ,GAAG,iCAAiC;AAClD,MAAMC,mBAAmB,GAAG,2CAA2C,CAAC,CAAC;;AAEzE,IAAIC,WAAW,GAAG,IAAI;AAEtB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACyB,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAC2B,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC+B,OAAO,EAAEC,UAAU,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiC,QAAQ,EAAEC,WAAW,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM;IAAEmC,KAAK;IAAEC;EAAO,CAAC,GAAG/B,aAAa,CAAC,CAAC;;EAEzC;EACAJ,SAAS,CAAC,MAAM;IACd,MAAMoC,OAAO,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACF,MAAM;UAAEC,OAAO;UAAEC;QAAe,CAAC,GAAG,MAAM,MAAM,CAC9C,4DACF,CAAC;QACD,MAAMD,OAAO,CAAC,CAAC;QACflB,WAAW,GAAG,MAAMmB,cAAc,CAAC;UACjCC,kBAAkB,EAAE,4CAA4C;UAChEC,kBAAkB,EAAE,4CAA4C;UAChEC,4BAA4B,EAAE,4CAA4C;UAC1EC,kCAAkC,EAAE,4CAA4C;UAChFC,yCAAyC,EAAE,4CAA4C;UACvFC,OAAO,EAAE,QAAQ;UACjBC,cAAc,EAAE,KAAK;UACrBC,OAAO,EAAEC,MAAM,CAACC,QAAQ;UACxBC,UAAU,EAAE;QACd,CAAC,CAAC;QACFpB,WAAW,CAAC,IAAI,CAAC;QACjBqB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC/B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZF,OAAO,CAACG,KAAK,CAAC,iBAAiB,EAAED,GAAG,CAAC;MACvC;IACF,CAAC;IACDhB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI,CAACP,MAAM,CAACC,QAAQ,EAAE;MAAEO,KAAK,CAAC,eAAe,CAAC;MAAE;IAAQ;IACxD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACC,QAAQ,CAACS,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MACjFnC,gBAAgB,CAACiC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAMJ,GAAG,EAAE;MACXG,KAAK,CAAC,UAAU,GAAGH,GAAG,CAACO,OAAO,CAAC;IACjC;EACF,CAAC;EAED,MAAMC,WAAW,GAAIC,MAAM,IAAK,IAAI5D,MAAM,CAAC6D,QAAQ,CAACvD,gBAAgB,EAAEC,GAAG,EAAEqD,MAAM,CAAC;EAElF,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACzC,aAAa,IAAI,CAACM,QAAQ,EAAE;IAEjCG,UAAU,CAAC,IAAI,CAAC;IAChBE,WAAW,CAAC,CAAC,CAAC;IAEd,IAAI;MACF,MAAM+B,QAAQ,GAAG,IAAI/D,MAAM,CAACgE,eAAe,CAAClB,MAAM,CAACC,QAAQ,CAAC;MAC5D,MAAMa,MAAM,GAAG,MAAMG,QAAQ,CAACE,SAAS,CAAC,CAAC;MACzC,MAAMC,QAAQ,GAAGP,WAAW,CAACC,MAAM,CAAC;;MAEpC;MACA,MAAMO,WAAW,GAAGnE,MAAM,CAACoE,WAAW,CAAC,GAAGtD,QAAQ,MAAMC,QAAQ,EAAE,CAAC;MACnE,MAAMsD,SAAS,GAAG,EAAE;MACpB,IAAIC,iBAAiB,GAAG,EAAE;MAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,WAAW,CAACK,MAAM,EAAED,CAAC,IAAIF,SAAS,EAAE;QACtD,MAAMI,KAAK,GAAGN,WAAW,CAACO,KAAK,CAACH,CAAC,EAAEA,CAAC,GAAGF,SAAS,CAAC;QACjD,MAAMM,MAAM,GAAGzD,WAAW,CAAC0D,oBAAoB,CAACtE,gBAAgB,EAAE,MAAMsD,MAAM,CAACiB,UAAU,CAAC,CAAC,CAAC;QAC5F,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACD,MAAM,EAAEM,CAAC,EAAE,EAAEH,MAAM,CAACI,KAAK,CAACC,MAAM,CAACP,KAAK,CAACK,CAAC,CAAC,CAAC,CAAC;QACrE,MAAMG,UAAU,GAAG,MAAMN,MAAM,CAACO,OAAO,CAAC,CAAC;QACzCZ,iBAAiB,CAACa,IAAI,CAAC,GAAGF,UAAU,CAACG,OAAO,CAAC;QAE7CpD,WAAW,CAACqD,IAAI,CAACC,KAAK,CAAE,CAACf,CAAC,GAAGE,KAAK,CAACD,MAAM,IAAIL,WAAW,CAACK,MAAM,GAAI,GAAG,CAAC,CAAC;QACxE,MAAM,IAAIe,OAAO,CAACC,GAAG,IAAIC,UAAU,CAACD,GAAG,EAAE,EAAE,CAAC,CAAC;MAC/C;;MAEA;MACA,MAAME,MAAM,GAAG,IAAI5C,MAAM,CAAC6C,UAAU,CAAC;QAAEC,KAAK,EAAE3E;MAAoB,CAAC,CAAC;MACpE,MAAM4E,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAAC1B,iBAAiB,CAAC,CAAC,CAAC;MAC1D,MAAM2B,GAAG,GAAG,MAAMP,MAAM,CAACQ,SAAS,CAACL,IAAI,CAAC;MACxC5C,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE+C,GAAG,CAAC;;MAE5B;MACA,MAAME,EAAE,GAAG,MAAMjC,QAAQ,CAACkC,WAAW,CAAC,MAAMxC,MAAM,CAACiB,UAAU,CAAC,CAAC,EAAEoB,GAAG,EAAE;QAAEI,QAAQ,EAAE;MAAQ,CAAC,CAAC;MAC5F3E,SAAS,CAACyE,EAAE,CAACG,IAAI,CAAC;MAClB9E,gBAAgB,CAAC,IAAI,CAAC;IAExB,CAAC,CAAC,OAAM2B,GAAG,EAAE;MACXF,OAAO,CAACG,KAAK,CAACD,GAAG,CAAC;MAClBG,KAAK,CAAC,WAAW,GAAGH,GAAG,CAACO,OAAO,CAAC;IAClC,CAAC,SAAS;MACR5B,UAAU,CAAC,KAAK,CAAC;MACjBE,WAAW,CAAC,CAAC,CAAC;IAChB;EACF,CAAC;EAED,oBACE3B,OAAA;IAAKkG,KAAK,EAAE;MAAEC,SAAS,EAAC,QAAQ;MAAEC,OAAO,EAAC,MAAM;MAAEC,QAAQ,EAAC;IAAW,CAAE;IAAAC,QAAA,GACrEpF,aAAa,iBAAIlB,OAAA,CAACH,QAAQ;MAAC+B,KAAK,EAAEA,KAAM;MAACC,MAAM,EAAEA;IAAO;MAAA0E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5D1G,OAAA;MAAQ2G,OAAO,EAAE3F,aAAa,GAAG,MAAMC,gBAAgB,CAAC,IAAI,CAAC,GAAG+B,aAAc;MAAAsD,QAAA,EAC3EtF,aAAa,GAAGA,aAAa,CAACqD,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC,GAAC,KAAK,GAACrD,aAAa,CAACqD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG;IAAM;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CAAC,eAET1G,OAAA;MAAAsG,QAAA,EAAK7F;IAAQ;MAAA8F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACnB1G,OAAA,CAACJ,MAAM,CAACgH,GAAG;MAACC,GAAG,EAAElG,QAAS;MAACmG,GAAG,EAAC,KAAK;MAACZ,KAAK,EAAE;QAAEtE,KAAK,EAAC,GAAG;QAAEC,MAAM,EAAC;MAAI;IAAE;MAAA0E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzE1G,OAAA;MAAAsG,QAAA,EAAI5F;IAAQ;MAAA6F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEjB1G,OAAA;MAAQ2G,OAAO,EAAElD,UAAW;MAACsD,QAAQ,EAAE,CAAC/F,aAAa,IAAI,CAACM,QAAQ,IAAIE,OAAQ;MAAA8E,QAAA,EAC3E9E,OAAO,GAAG,cAAcE,QAAQ,GAAG,GAAG;IAAU;MAAA6E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,EAERxF,aAAa,IAAIE,MAAM,iBACtBpB,OAAA;MAAAsG,QAAA,GAAG,gBAAI,eAAAtG,OAAA;QAAGgH,IAAI,EAAE,mCAAmC5F,MAAM,EAAG;QAAC6F,MAAM,EAAC,QAAQ;QAAAX,QAAA,EAAElF;MAAM;QAAAmF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC7F;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC3F,EAAA,CApHQD,GAAG;EAAA,QAOgBhB,aAAa;AAAA;AAAAoH,EAAA,GAPhCpG,GAAG;AAsHZ,eAAeA,GAAG;AAAC,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}